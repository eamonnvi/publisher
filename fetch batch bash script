BATCH_ID="batch_68a994b9ebc08190888f0209c9b460e6"
RUN_DIR="outputs/TPV-13aug2025.concise.gpt-4.1.20250823_111520"

python3 - <<'PY'
from pathlib import Path
import json, sys
from openai import OpenAI
from ntk_batch import poll_batch, get_batch_status, _download_file_bytes, parse_batch_output_ndjson
from ntk_core import write_markdown, write_jsonl

BATCH_ID = """'"'"'${BATCH_ID}'"'"'"""  # bash inject
RUN_DIR = Path("""'"'"'${RUN_DIR}'"'"'""")

client = OpenAI()

# Load batch_map.json (custom_id -> heading)
map_path = RUN_DIR / "batch_map.json"
cid_to_heading = json.loads(map_path.read_text(encoding="utf-8"))

# Poll until done (or 5 minutes)
info = poll_batch(client, BATCH_ID, timeout_s=300, every_s=5, verbose=True)
print("[info] final status:", info.get("status"))

if info.get("status") != "completed":
    sys.exit(0)

out_id = info.get("output_file_id")
if not out_id:
    print("[error] completed but no output_file_id; cannot fetch outputs", file=sys.stderr)
    sys.exit(2)

raw = _download_file_bytes(client, out_id)
(RUN_DIR / "batch_output.raw.ndjson").write_bytes(raw)

triples = parse_batch_output_ndjson(raw, cid_to_heading)  # [(heading, text, status)]
md_name = next(RUN_DIR.glob("*.md")).name if list(RUN_DIR.glob("*.md")) else "batch.md"
stem = md_name.rsplit(".", 1)[0]

write_markdown([(h,t) for (h,t,_) in triples], RUN_DIR / f"{stem}", title="Concise Report")
write_jsonl([(h,t) for (h,t,_) in triples], RUN_DIR / f"{stem}.jsonl")
print("[ok] fetched & wrote outputs to", RUN_DIR)
PY